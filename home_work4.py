# from abc import ABC, abstractmethod
# # 1
# class Animal(ABC):
#     def __init__(self, name: str, age: int):
#         self.name = name 
#         self.age = age 
    
#     @property
#     @abstractmethod
#     def make_sound(self):
#         pass
    
    
#     @abstractmethod
#     def display_info(self):
#         pass
# # 2  
# class Lion(Animal):
    
#     @property
#     def make_sound(self):
#         return '–†—Ä—Ä—Ä'
    
#     def display_info(self):
#         return (
#             f"üêæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –õ—å–≤–µ:\n"
#             f"  –ò–º—è: {self.name}\n"
#             f"  –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å: {self.age} –ª–µ—Ç\n"
#             f"  –û–Ω —É–º–µ–µ—Ç —Ä—ã—á–∞—Ç—å: {self.make_sound}\n"
#         )
# class Elephant(Animal):
    
#     @property
#     def make_sound(self):
#         return '–£—É—É—É'
    
#     def display_info(self):
#         return (
#             f"üêò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°–ª–æ–Ω–µ:\n"
#             f"  –ò–º—è: {self.name}\n"
#             f"  –ï–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è: {self.age} –ª–µ—Ç\n"
#             f"  –û–Ω —É–º–µ–µ—Ç –∏–∑–¥–∞–≤–∞—Ç—å –∑–≤—É–∫: {self.make_sound}\n"
#         )
# # 3
# def introduce_animal(animal: Animal):
#     print(animal.display_info())
#     print(f"üîä –ó–≤—É–∫: {animal.make_sound}")
#     print('-' * 30)


# lion = Lion(name='–°–∏–º–±–∞', age=11)
# elephant = Elephant(name='–î–∂–∞–º–±–æ', age=50)
   
# result = [lion, elephant]

# for res in result:  
#     introduce_animal(res)
    
    
# –ó–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–≤–∞–ª–∏ –Ω–∞ —É—Ä–æ–∫–µ 

class Employee:
    def __init__(self, name: str, base_rate: float):
        self.name = name
        self.base_rate = base_rate
        

    def calculate_salary(self):
        return 0.0

    def display_info(self):
        return (
            f"–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {self.name}\n"
            f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {self.base_rate}\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {self.calculate_salary()}\n"
        )
        
class FullTimeEmployee(Employee):
    def calculate_salary(self):
        return self.base_rate * 1.5

class PartTimeEmployee(Employee):
    def __init__(self, name: str, base_rate: float, hours_worked: float):
        super().__init__(name, base_rate)
        self.hours_worked = hours_worked

    def calculate_salary(self):
        return self.base_rate * 0.5 * self.hours_worked

def process_salary(employee: Employee):
    print(employee.display_info())


full_time_employee = FullTimeEmployee(name='–†—É—Å—Ç–∞–º', base_rate=2000)
part_time_employee = PartTimeEmployee(name='–ê–ª–µ–∫—Å–µ–π', base_rate=1000, hours_worked=8)

result = [full_time_employee, part_time_employee]

for res in result:
    process_salary(res)
